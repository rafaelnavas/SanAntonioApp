legend.title = element_blank())+
labs(x="Streamflow (lps)", y = "Density")
dd8 = ggplot(qd8, aes(x=q,col=tipo,fill=tipo)) +
geom_density(alpha=0.5) +
scale_x_log10(breaks=c(0.001,0.01,0.1,1,10,100,1000)) +
theme(legend.position = c(0.8,0.8),
legend.title = element_blank())+
labs(x="Streamflow (lps)", y = "Density")
dd10 = ggplot(qd10, aes(x=q,col=tipo,fill=tipo)) +
geom_density(alpha=0.5) +
scale_x_log10(breaks=c(0.001,0.01,0.1,1,10,100,1000)) +
theme(legend.position = c(0.8,0.8),
legend.title = element_blank())+
labs(x="Streamflow (lps)", y = "Density")
ggarrange(fig8,fig10,fig4,dd8,dd10,dd4,
labels = c("(a)", "(b)", "(c)"),
ncol = 3, nrow = 2,
label.x = 0.85,
label.y = 0.98)
dd4 = ggplot(qd4, aes(x=q,col=tipo,fill=tipo)) +
geom_density(alpha=0.5) +
scale_x_log10(breaks=c(0.001,0.01,0.1,1,10,100,1000)) +
theme(legend.position = c(0.8,0.8),
legend.title = element_blank())+
labs(x="Streamflow (lps)", y = "Density") +
theme(axis.text.x  = element_text( angle = 90))
dd8 = ggplot(qd8, aes(x=q,col=tipo,fill=tipo)) +
geom_density(alpha=0.5) +
scale_x_log10(breaks=c(0.001,0.01,0.1,1,10,100,1000)) +
theme(legend.position = c(0.8,0.8),
legend.title = element_blank())+
labs(x="Streamflow (lps)", y = "Density") +
theme(axis.text.x  = element_text( angle = 90))
dd10 = ggplot(qd10, aes(x=q,col=tipo,fill=tipo)) +
geom_density(alpha=0.5) +
scale_x_log10(breaks=c(0.001,0.01,0.1,1,10,100,1000)) +
theme(legend.position = c(0.8,0.8),
legend.title = element_blank())+
labs(x="Streamflow (lps)", y = "Density") +
theme(axis.text.x  = element_text( angle = 90))
ggarrange(fig8,fig10,fig4,dd8,dd10,dd4,
labels = c("(a)", "(b)", "(c)"),
ncol = 3, nrow = 2,
label.x = 0.85,
label.y = 0.98)
ggarrange(fig8,fig10,fig4,dd8,dd10,dd4,
labels = c("(a)", "(b)", "(c)","(d)", "(e)", "(f)"),
ncol = 3, nrow = 2,
label.x = 0.85,
label.y = 0.98)
f4 = data.frame(x = c(1000*flow[-1,mm], qtl[-1,mm,4]),
y = c(100:1,100:1),
FDC = c(rep("Annual",100),
rep("April",100)))
f8 = data.frame(x = c(1000*flow[-1,mm], qtl[-1,mm,8]),
y = c(100:1,100:1),
FDC = c(rep("Annual",100),
rep("August",100)))
f10 = data.frame(x = c(1000*flow[-1,mm], qtl[-1,mm,10]),
y = c(100:1,100:1),
FDC = c(rep("Annual",100),
rep("October",100)))
fig10 = ggplot(data=f10, aes(x=x, y=y,col=FDC))+
geom_line() +
#coord_trans(x="log") +
scale_x_log10(breaks=c(0.001,0.01,0.1,1,10,100,1000)) +
#scale_x_continuous(breaks=c(0.01,0.1,1,10,100,1000)) +
xlab("Streamflow (lps)") + ylab("Exceedance probability (%)") +
theme(legend.position = c(0.8,0.8),legend.title = element_blank())+
theme(axis.text.x  = element_text( angle = 90))
fig4 = ggplot(data=f4, aes(x=x, y=y,col=FDC))+
geom_line() +
#coord_trans(x="log") +
scale_x_log10(breaks=c(0.001,0.01,0.1,1,10,100,1000)) +
#scale_x_continuous(breaks=c(0.01,0.1,1,10,100,1000)) +
xlab("Streamflow (lps)") + ylab("Exceedance probability (%)") +
theme(legend.position = c(0.8,0.8),legend.title = element_blank()) +
theme(axis.text.x  = element_text( angle = 90))
fig8 = ggplot(data=f8, aes(x=x, y=y,col=FDC))+
geom_line() +
#coord_trans(x="log") +
scale_x_log10(breaks=c(0.001,0.01,0.1,1,10,100,1000)) +
#scale_x_continuous(breaks=c(0.01,0.1,1,10,100,1000)) +
xlab("Streamflow (lps)") + ylab("Exceedance probability (%)") +
theme(legend.position = c(0.8,0.8),legend.title = element_blank())+
theme(axis.text.x  = element_text( angle = 90))
ggarrange(fig8,fig10,fig4,dd8,dd10,dd4,
labels = c("(a)", "(b)", "(c)","(d)", "(e)", "(f)"),
ncol = 3, nrow = 2,
label.x = 0.85,
label.y = 0.98)
png(file = "/home/rafael/Documentos/gis/SanAntonio/FDC.png",
width = 20, height = 15,res=300, units = "cm")
ggarrange(fig8,fig10,fig4,dd8,dd10,dd4,
labels = c("(a)", "(b)", "(c)","(d)", "(e)", "(f)"),
ncol = 3, nrow = 2,
label.x = 0.85,
label.y = 0.98)
dev.off()
png(file = "/home/rafael/Documentos/gis/SanAntonio/FDC.png",
width = 25, height = 15,res=300, units = "cm")
ggarrange(fig8,fig10,fig4,dd8,dd10,dd4,
labels = c("(a)", "(b)", "(c)","(d)", "(e)", "(f)"),
ncol = 3, nrow = 2,
label.x = 0.85,
label.y = 0.98)
dev.off()
shiny::runApp()
x = -57.972
y=-31.349
xu = 5932.2215 +  95.2997*x
yu = 9977.3713 + 109.9222*y
dd = sqrt((xu - xy_utm[,1])^2 + (yu - xy_utm[,2])^2)
mm = order(dd)[1]
mm
f4 = data.frame(x = c(1000*flow[-1,mm], qtl[-1,mm,4]),
y = c(100:1,100:1),
FDC = c(rep("Annual",100),
rep("April",100)))
f8 = data.frame(x = c(1000*flow[-1,mm], qtl[-1,mm,8]),
y = c(100:1,100:1),
FDC = c(rep("Annual",100),
rep("August",100)))
f10 = data.frame(x = c(1000*flow[-1,mm], qtl[-1,mm,10]),
y = c(100:1,100:1),
FDC = c(rep("Annual",100),
rep("October",100)))
fig10 = ggplot(data=f10, aes(x=x, y=y,col=FDC))+
geom_line() +
#coord_trans(x="log") +
scale_x_log10(breaks=c(0.001,0.01,0.1,1,10,100,1000)) +
#scale_x_continuous(breaks=c(0.01,0.1,1,10,100,1000)) +
xlab("Streamflow (lps)") + ylab("Exceedance probability (%)") +
theme(legend.position = c(0.8,0.8),legend.title = element_blank())+
theme(axis.text.x  = element_text( angle = 90))
fig4 = ggplot(data=f4, aes(x=x, y=y,col=FDC))+
geom_line() +
#coord_trans(x="log") +
scale_x_log10(breaks=c(0.001,0.01,0.1,1,10,100,1000)) +
#scale_x_continuous(breaks=c(0.01,0.1,1,10,100,1000)) +
xlab("Streamflow (lps)") + ylab("Exceedance probability (%)") +
theme(legend.position = c(0.8,0.8),legend.title = element_blank()) +
theme(axis.text.x  = element_text( angle = 90))
fig8 = ggplot(data=f8, aes(x=x, y=y,col=FDC))+
geom_line() +
#coord_trans(x="log") +
scale_x_log10(breaks=c(0.001,0.01,0.1,1,10,100,1000)) +
#scale_x_continuous(breaks=c(0.01,0.1,1,10,100,1000)) +
xlab("Streamflow (lps)") + ylab("Exceedance probability (%)") +
theme(legend.position = c(0.8,0.8),legend.title = element_blank())+
theme(axis.text.x  = element_text( angle = 90))
qd4 = data.frame(q=c(1000*qsim[qsim$mes==4,mm],1000*qsim[,mm]),
tipo = c(rep("April",length(qsim[qsim$mes==4,mm])),
rep("Annual",nrow(qsim))))
qd8 = data.frame(q=c(1000*qsim[qsim$mes==8,mm],1000*qsim[,mm]),
tipo = c(rep("August",length(qsim[qsim$mes==8,mm])),
rep("Annual",nrow(qsim))))
qd10 = data.frame(q=c(1000*qsim[qsim$mes==10,mm],1000*qsim[,mm]),
tipo = c(rep("October",length(qsim[qsim$mes==10,mm])),
rep("Annual",nrow(qsim))))
dd4 = ggplot(qd4, aes(x=q,col=tipo,fill=tipo)) +
geom_density(alpha=0.5) +
scale_x_log10(breaks=c(0.001,0.01,0.1,1,10,100,1000)) +
theme(legend.position = c(0.8,0.8),
legend.title = element_blank())+
labs(x="Streamflow (lps)", y = "Density") +
theme(axis.text.x  = element_text( angle = 90))
dd8 = ggplot(qd8, aes(x=q,col=tipo,fill=tipo)) +
geom_density(alpha=0.5) +
scale_x_log10(breaks=c(0.001,0.01,0.1,1,10,100,1000)) +
theme(legend.position = c(0.8,0.8),
legend.title = element_blank())+
labs(x="Streamflow (lps)", y = "Density") +
theme(axis.text.x  = element_text( angle = 90))
dd10 = ggplot(qd10, aes(x=q,col=tipo,fill=tipo)) +
geom_density(alpha=0.5) +
scale_x_log10(breaks=c(0.001,0.01,0.1,1,10,100,1000)) +
theme(legend.position = c(0.8,0.8),
legend.title = element_blank())+
labs(x="Streamflow (lps)", y = "Density") +
theme(axis.text.x  = element_text( angle = 90))
ggarrange(fig8,fig10,fig4,dd8,dd10,dd4,
labels = c("(a)", "(b)", "(c)","(d)", "(e)", "(f)"),
ncol = 3, nrow = 2,
label.x = 0.85,
label.y = 0.98)
qsim <- readRDS("~/Documentos/R_proyects/Rwflow/flow_1992_2020.RDS")
dim(qsim)
Rdate = seq.Date(as.Date("1992-01-01"),as.Date("2020-12-31"), by="day")
qsim = as.data.frame(qsim)
qsim$mes = as.numeric(format(Rdate,"%m"))
qsim <- readRDS("~/Documentos/R_proyects/Rwflow/flow_1992_2020.RDS")
Rdate = seq.Date(as.Date("1992-01-01"),as.Date("2020-12-31"), by="day")
qsim = as.data.frame(qsim)
qsim$mes = as.numeric(format(Rdate,"%m"))
dim(qsim)
rm(list = ls())
dec = readRDS("dec.RDS")
flow = readRDS("flow.RDS")
utm = readRDS("utm.RDS")
xy_sp_dec = readRDS("xy_sp_dec.RDS")
xy_sp_utm = readRDS("xy_sp_utm.RDS")
xy_utm = readRDS("xy_utm.RDS")
base = readRDS("base.RDS")
logo = readRDS("logo.RDS")
qtl = readRDS("qtl.RDS")
xy_dec = readRDS("xy_dec.RDS")
x = -57.972
y=-31.349
x = -57.8
y = -31.3
xu = 5932.2215 +  95.2997*x
yu = 9977.3713 + 109.9222*y
dd = sqrt((xu - xy_utm[,1])^2 + (yu - xy_utm[,2])^2)
mm = order(dd)[1]
mm
x = -57.972
y=-31.349
xu = 5932.2215 +  95.2997*x
yu = 9977.3713 + 109.9222*y
dd = sqrt((xu - xy_utm[,1])^2 + (yu - xy_utm[,2])^2)
mm = order(dd)[1]
mm
qsim <- readRDS("~/Documentos/R_proyects/Rwflow/flow_1992_2020.RDS")
Rdate = seq.Date(as.Date("1992-01-01"),as.Date("2020-12-31"), by="day")
qsim = as.data.frame(qsim)
qsim$mes = as.numeric(format(Rdate,"%m"))
dim(qsim)
qsim <- readRDS("~/Documentos/R_proyects/Rwflow/flow_1992_2020.RDS")
Rdate = seq.Date(as.Date("1992-01-01"),as.Date("2020-12-31"), by="day")
qsim = as.data.frame(qsim)
qsim = qsim[,288]
qsim = data.frame(mes=as.numeric(format(Rdate,"%m")),qsim)
qsim <- readRDS("~/Documentos/R_proyects/Rwflow/flow_1992_2020.RDS")
Rdate = seq.Date(as.Date("1992-01-01"),as.Date("2020-12-31"), by="day")
qsim = as.data.frame(qsim)
qsim$mes = as.numeric(format(Rdate,"%m"))
qsim = qsim[,288]
qsim = data.frame(mes=as.numeric(format(Rdate,"%m")),qsim)
ene = qsim[qsim$mes==1,]
Jan = qsim[qsim$mes==1,]
Feb = qsim[qsim$mes==2,]
Mar = qsim[qsim$mes==3,]
Apr = qsim[qsim$mes==4,]
May = qsim[qsim$mes==5,]
Jun = qsim[qsim$mes==6,]
Jul = qsim[qsim$mes==7,]
Aug = qsim[qsim$mes==8,]
Sep = qsim[qsim$mes==9,]
Oct = qsim[qsim$mes==10,]
Nov = qsim[qsim$mes==11,]
Dic = qsim[qsim$mes==12,]
dim(Dic)
dim(Feb)
head(Dic)
Jan = qsim[qsim$mes==1,2]
Feb = qsim[qsim$mes==2,2]
Mar = qsim[qsim$mes==3,2]
Apr = qsim[qsim$mes==4,2]
May = qsim[qsim$mes==5,2]
Jun = qsim[qsim$mes==6,2]
Jul = qsim[qsim$mes==7,2]
Aug = qsim[qsim$mes==8,2]
Sep = qsim[qsim$mes==9,2]
Oct = qsim[qsim$mes==10,2]
Nov = qsim[qsim$mes==11,2]
Dic = qsim[qsim$mes==12,2]
sim <- readRDS("~/Documentos/R_proyects/Rwflow/flow_1992_2020.RDS")
Rdate = seq.Date(as.Date("1992-01-01"),as.Date("2020-12-31"), by="day")
qsim = as.data.frame(qsim)
qsim$mes = as.numeric(format(Rdate,"%m"))
qsim = qsim[,288]
qsim = data.frame(mes=as.numeric(format(Rdate,"%m")),qsim)
head(qsim)
qsim <- readRDS("~/Documentos/R_proyects/Rwflow/flow_1992_2020.RDS")
Rdate = seq.Date(as.Date("1992-01-01"),as.Date("2020-12-31"), by="day")
qsim = as.data.frame(qsim)
qsim$mes = as.numeric(format(Rdate,"%m"))
qsim = qsim[,288]
qsim = data.frame(mes=as.numeric(format(Rdate,"%m")),qsim)
head(qsim)
qsim <- readRDS("~/Documentos/R_proyects/Rwflow/flow_1992_2020.RDS")
Rdate = seq.Date(as.Date("1992-01-01"),as.Date("2020-12-31"), by="day")
qsim = as.data.frame(qsim)
qsim$mes = as.numeric(format(Rdate,"%m"))
qsim = qsim[,288]
qsim = data.frame(mes=as.numeric(format(Rdate,"%m")),qsim = qsim*1000)
head(qsim)
qsim <- readRDS("~/Documentos/R_proyects/Rwflow/flow_1992_2020.RDS")
Rdate = seq.Date(as.Date("1992-01-01"),as.Date("2020-12-31"), by="day")
qsim = as.data.frame(qsim)
qsim$mes = as.numeric(format(Rdate,"%m"))
qsim = qsim[,288]
qsim = data.frame(mes=as.numeric(format(Rdate,"%m")),qsim = qsim)
library(ggplot2)
ggplot(data=qsim, aes(x=mes, y=qsim))
ggplot(data=qsim, aes(x=mes, y=qsim)) +
geom_boxplot()
summary(qsim)
qsim <- readRDS("~/Documentos/R_proyects/Rwflow/flow_1992_2020.RDS")
Rdate = seq.Date(as.Date("1992-01-01"),as.Date("2020-12-31"), by="day")
qsim = as.data.frame(qsim)
qsim$mes = as.numeric(format(Rdate,"%m"))
qsim = qsim[,288]
qsim = data.frame(mes=as.numeric(format(Rdate,"%m")),q = qsim)
summary(qsim)
ggplot(data=qsim, aes(x=mes, y=q)) +
geom_boxplot()
qsim <- readRDS("~/Documentos/R_proyects/Rwflow/flow_1992_2020.RDS")
Rdate = seq.Date(as.Date("1992-01-01"),as.Date("2020-12-31"), by="day")
qsim = as.data.frame(qsim)
qsim$mes = as.numeric(format(Rdate,"%m"))
qsim = qsim[,288]
qsim = data.frame(mes=(format(Rdate,"%m")),q = qsim)
ggplot(data=qsim, aes(x=mes, y=q)) +
geom_boxplot()
ggplot(data=qsim, aes(x=mes, y=q)) +
geom_boxplot() +
scale_y_log10(breaks=c(0.001,0.01,0.1,1,10,100,1000))
ggplot(data=qsim, aes(x=mes, y=q)) +
geom_boxplot() +
scale_y_log10(breaks=c(0.01,0.1,0.1,1,10,100,1000))
ggplot(data=qsim, aes(x=mes, y=q)) +
geom_boxplot() +
scale_y_log10(breaks=c(0.01,0.1,0.1,1,10,100,100))
qsim <- readRDS("~/Documentos/R_proyects/Rwflow/flow_1992_2020.RDS")
Rdate = seq.Date(as.Date("1992-01-01"),as.Date("2020-12-31"), by="day")
qsim = as.data.frame(qsim)
qsim$mes = as.numeric(format(Rdate,"%m"))
qsim = qsim[,288]
qsim = data.frame(mes=paste(as.numeric(format(Rdate,"%m"))),
q = qsim)
ggplot(data=qsim, aes(x=mes, y=q)) +
geom_boxplot() +
scale_y_log10(breaks=c(0.01,0.1,0.1,1,10,100,100))
ggplot(data=qsim, aes(x=mes, y=q)) +
geom_boxplot() +
scale_y_log10(breaks=c(0.01,0.1,0.1,1,10,100,100))
ylab("Streamflow (m3/s)") + xlab("Month")
ggplot(data=qsim, aes(x=mes, y=q)) +
geom_boxplot() +
scale_y_log10(breaks=c(0.01,0.1,0.1,1,10,100,100)) +
ylab("Streamflow (m3/s)") + xlab("Month")
qsim <- readRDS("~/Documentos/R_proyects/Rwflow/flow_1992_2020.RDS")
Rdate = seq.Date(as.Date("1992-01-01"),as.Date("2020-12-31"), by="day")
qsim = as.data.frame(qsim)
qsim$mes = as.numeric(format(Rdate,"%m"))
qsim = qsim[,288]
qsim = data.frame(mes=paste((format(Rdate,"%m"))),
q = qsim)
library(ggplot2)
ggplot(data=qsim, aes(x=mes, y=q)) +
geom_boxplot() +
scale_y_log10(breaks=c(0.01,0.1,0.1,1,10,100,100)) +
ylab("Streamflow (m3/s)") + xlab("Month")
ggplot(data=qsim, aes(x=mes, y=q)) +
geom_boxplot() +
#  scale_y_log10(breaks=c(0.01,0.1,0.1,1,10,100,100)) +
ylab("Streamflow (m3/s)") + xlab("Month")
ggplot(data=qsim, aes(x=mes, y=q)) +
geom_boxplot() +
scale_y_log10(breaks=c(0.01,0.1,0.1,1,10,100,100)) +
ylab("Streamflow (m3/s)") + xlab("Month")
png(file = "/home/rafael/Documentos/gis/SanAntonio/FlowOutlet.png",
width = 15, height = 10,res=300, units = "cm")
ggplot(data=qsim, aes(x=mes, y=q)) +
geom_boxplot() +
scale_y_log10(breaks=c(0.01,0.1,0.1,1,10,100,100)) +
ylab("Streamflow (m3/s)") + xlab("Month")
dev.off()
dev.off()
SanAntonioFDC = function(){
pkg_path <- system.file(package = "SAp")
dec = readRDS(paste0(pkg_path,"/data/dec.RDS"))
flow = readRDS(paste0(pkg_path,"/data/flow.RDS"))
utm = readRDS(paste0(pkg_path,"/data/utm.RDS"))
xy_sp_dec = readRDS(paste0(pkg_path,"/data/xy_sp_dec.RDS"))
xy_sp_utm = readRDS(paste0(pkg_path,"/data/xy_sp_utm.RDS"))
xy_utm = readRDS(paste0(pkg_path,"/data/xy_utm.RDS"))
base = readRDS(paste0(pkg_path,"/data/base.RDS"))
logo = readRDS(paste0(pkg_path,"/data/logo.RDS"))
qtl = readRDS(paste0(pkg_path,"/data/qtl.RDS"))
xy_dec = readRDS(paste0(pkg_path,"/data/xy_dec.RDS"))
meses = c("enero","febrero",
"marzo","abril",
"mayo","junio",
"julio","agosto",
"septiembre","octubre",
"noviembre","diciembre")
ui <- shiny::navbarPage("San Antonio App",
shiny::tabPanel("Inicio",
shiny::mainPanel(
shiny::h3("Esta aplicación muestra las curvas de duración de caudales a lo largo del cauce del arroyo San Antonio - Salto (Uruguay). \n\n"),
shiny::h3("Han sido desarrolladas mediante modelación hidrológica distribuída WFLOW-HBV en el período 1991-2020. \n\n"),
shiny::h3("Es parte del proyecto Hacia una Gestión Integrada de los Recursos Hídricos en Sistemas Hidrológicos Altamente Antropizados: Arroyo San Antonio - Acuífero Salto/Arapey. \n\n"),
shiny::h3("Financiamiento: Agencia Nacional de Investigación e Innovación, Fondo María Viñas 2017."),
shiny::h3("Contacto: Rafael Navas (rafaelnavas23@gmail.com)"),
shiny::plotOutput("logoplot1")
)
),
shiny::tabPanel("Modo de uso",
shiny::mainPanel(
shiny::h3("Instrucciones: \n\n"),
shiny::h4("Ingrese el mes de consulta (menu desplegable panel izquierdo superior). \n\n"),
shiny::h4("Ingrese las coordenadas haciendo clic con el botón izquierdo del ratón en el mapa. \n\n"),
shiny::h3("Interpretación: \n\n"),
shiny::h4("El cuadro del panel izquierdo le muestra las coordenadas de los puntos A y B así como la distancia A-B. \n\n"),
shiny::h4("La curva de duración de caudales (CDC) indica la probabilidad de que un caudal dado sea igualado o excedido. \n\n"),
shiny::h4("En azul la CDC para el caudal diario en el período 1991-2020. \n\n"),
shiny::h4("En rojo la CDC para el caudal diario del mes de consulta (definido en el paso 3). \n\n"),
shiny::h4("Si la curva roja ese ubica por arriba de la curva azul, la probabilidad de excedencia de un caudal dado en el mes de consulta será mayor que en el período. \n\n"),
shiny::h4("Casos interesantes son: enero y agosto (más probable caudales bajos), octubre (más probable caudales altos), abril (mes muy variable, más probable altos y bajos). \n\n")
)
),
shiny::tabPanel("Aplicación",
shiny::sidebarPanel(
shiny::fluidRow(shiny::selectInput(inputId = "mes",
label=NULL,
choices = meses,
selected = "enero")),
shiny::fluidRow(shiny::plotOutput("out2",click = "plot_click")),
shiny::fluidRow(shiny::verbatimTextOutput("info"))
),
shiny::mainPanel(
shiny::fluidRow(shiny::plotOutput('out3')),
shiny::fluidRow(shiny::plotOutput('logoplot2'))
)
)
)
server <- function(input, output) {
output$logoplot1 <- shiny::renderPlot({
par(mar=c(2,0,0,0))
plot(c(1,dim(logo)[2]),c(1,dim(logo)[1]), type="n",
xaxt="n",xlab="", yaxt="n",ylab="",bty="n")
rasterImage(logo,1,1,dim(logo)[2],dim(logo)[1])
})
output$logoplot2 <- shiny::renderPlot({
par(mar=c(2,0,0,0))
plot(c(1,dim(logo)[2]),c(1,dim(logo)[1]), type="n",
xaxt="n",xlab="", yaxt="n",ylab="",bty="n")
rasterImage(logo,1,1,dim(logo)[2],dim(logo)[1])
#plot(1:100)
})
val <- shiny::reactiveValues(clickx = -57.8, clicky = -31.3)
shiny::observe({
input$plot_click
isolate({
val$clickx = c(val$clickx, input$plot_click$x)
val$clicky = c(val$clicky, input$plot_click$y)
})
}) #adding clicks to list
output$out2 <- shiny::renderPlot({
x = val$clickx[length(val$clickx)]
y = val$clicky[length(val$clickx)]
xu = 5932.2215 +  95.2997*x
yu = 9977.3713 + 109.9222*y
dd = sqrt((xu - xy_utm[,1])^2 + (yu - xy_utm[,2])^2)
mm = order(dd)[1]
par(mar=c(5,5,1,0))
raster::plot(xy_sp_dec,pch=".",cex=2,col="blue",las=2,axes=T, ylim=c(-31.4,-31.25))
rasterImage(base, -58.028,-31.46,-57.63,-31.216, interpolate = F)
raster::plot(xy_sp_dec,pch=15,cex=0.5,col="blue",add=T)
shiny::isolate({
points(val$clickx[length(val$clickx)], val$clicky[length(val$clickx)],pch=19,col=2,cex=2)
points(xy_dec[mm,1],xy_dec[mm,2],pch=19,col=2,cex=2)
lines(c(val$clickx[length(val$clickx)],xy_dec[mm,1]),
c(val$clicky[length(val$clickx)],xy_dec[mm,2]),
col=2,lty=2)
text(val$clickx[length(val$clickx)], val$clicky[length(val$clickx)], "A",pos=4)
text(xy_dec[mm,1],xy_dec[mm,2],"B",pos=2)
})
})
output$info <- shiny::renderText({
x = val$clickx[length(val$clickx)]
y = val$clicky[length(val$clickx)]
xu = 5932.2215 +  95.2997*x
yu = 9977.3713 + 109.9222*y
dd = sqrt((xu - xy_utm[,1])^2 + (yu - xy_utm[,2])^2)
mm = order(dd)[1]
paste0("Coordenadas A: ", round(val$clickx[length(val$clickx)],3), "ºW ",round(val$clicky[length(val$clickx)],3),"ºS", "\n",
"Coordenadas B: ", round(xy_dec[mm,1],3), "ºW ",round(xy_dec[mm,2],3),"ºS", "\n",
"Distancia A-B: ", round(dd[mm],1)," km")
})
output$out3 <- shiny::renderPlot({
x = val$clickx[length(val$clickx)]
y = val$clicky[length(val$clickx)]
xu = 5932.2215 +  95.2997*x
yu = 9977.3713 + 109.9222*y
dd = sqrt((xu - xy_utm[,1])^2 + (yu - xy_utm[,2])^2)
mm = order(dd)[1]
fig = plotly::plotly_empty()
mesN = match(input$mes,meses)
par(mar=c(4,4,1,1))
plot(x = 1000*flow[-1,mm], y = 100:1, type="l", log="x",
xlab="Caudal (lps)", ylab="Probabilidad de Excedencia (%)",
col="blue",lwd=2,las=2)
lines(x = qtl[-1,mm,mesN], y = 100:1,col="red",lwd=2)
abline(v = c(1e-4,1e-3,1e-2,1e-1,1,10,100,1000,10000,100000),col=8,lty=2)
abline(h = seq(0,100,20),col=8,lty=2)
})
}
# Run the application
shiny::shinyApp(ui = ui, server = server)
}
SanAntonioFDC()
usethis::use_r("base")
summary(
readRDS(paste0(pkg_path,"/data/base.RDS")))
summary(
readRDS("./data/base.RDS"))
devtools::document()
usethis::use_package_doc()
